{"version":3,"sources":["quiz.png","components/pages/Flags.js","components/pages/About.js","components/pages/Capitals.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Flags","props","shuffleArray","array","i","length","j","Math","floor","random","temp","setRandom","console","log","mapData","countries","shuffledCountries","filter","f","maps","some","m","state","selectedMap","setState","result","countryCode","iso2","countryName","name","countryImage","image","handleRegionClick","event","data","toLowerCase","handleMapChange","target","value","onResetClick","mapid","this","match","params","Fragment","className","style","fontFamily","color","margin","to","id","defaultValue","onChange","type","onClick","position","width","height","zIndex","src","alt","display","top","ref","containerClassName","containerStyle","map","backgroundColor","zoomOnScroll","regionsSelectable","regionsSelectableOne","regionStyle","initial","fill","stroke","hover","cursor","selected","selectedHover","zoomButtons","onRegionClick","onRegionTipShow","label","code","preventDefault","React","Component","About","Capitals","App","basename","process","exact","path","render","class","quiz","role","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u9wBAAAA,EAAOC,QAAU,IAA0B,kC,iTC2L5BC,E,YApLX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAyBVC,aAAe,SAACC,GAEZ,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACf,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEf,OAAOP,GAlCQ,EAqCnBQ,UAAY,WACRC,QAAQC,IAAIC,EAAQC,WACpB,IAAIC,EAAoB,EAAKd,aAAaY,EAAQC,UAAUE,QAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,MAAK,SAAAC,GAAC,OAAIA,IAAM,EAAKC,MAAMC,mBAC1GX,QAAQC,IAAIG,GACZ,EAAKQ,SAAS,CAAEC,OAAQ,UAAWC,YAAaV,EAAkB,GAAGW,KAAMC,YAAaZ,EAAkB,GAAGa,KAAMC,aAAcd,EAAkB,GAAGe,SAzCvI,EA4CnBC,kBAAoB,SAACC,EAAOC,GAGpB,EAAKZ,MAAMI,YAAYS,gBAAkBD,EAAKC,cAC9C,EAAKX,SAAS,CAAEC,OAAQ,YAExB,EAAKD,SAAS,CAAEC,OAAQ,WAlDb,EAsDnBW,gBAAkB,SAACH,GACf,EAAKT,SAAS,CAAED,YAAaU,EAAMI,OAAOC,QAC1C,EAAKC,gBAxDU,EA4DnBA,aAAe,WACX,EAAK5B,YACLC,QAAQC,IAAI,EAAKS,QA5DjB,EAAKA,MAAQ,CACTG,OAAQ,UACRC,YAAa,GACbE,YAAa,GACbE,aAAc,GACdP,YAAa,eAPF,E,iFAWE,IACTiB,EAAUC,KAAKxC,MAAMyC,MAAMC,OAA3BH,MACR5B,QAAQC,IAAI,iBAAmB2B,GACjB,UAAVA,EACAC,KAAKjB,SAAS,CAAED,YAAa,eAEd,WAAViB,EACLC,KAAKjB,SAAS,CAAED,YAAa,gBAEd,YAAViB,GACLC,KAAKjB,SAAS,CAAED,YAAa,iBAEjCkB,KAAK9B,c,+BA2CL,OACI,kBAAC,IAAMiC,SAAP,KACI,yBAAKC,UAAU,mBAEX,yBAAKA,UAAU,OAEX,yBAAKA,UAAU,UAEX,wBAAIC,MAAO,CAAEC,WAAY,cAAeC,MAAO,QAASC,OAAQ,SAAhE,wBAEA,yBAAKJ,UAAU,mBACX,kBAAC,IAAD,CAAMK,GAAG,IAAIL,UAAU,wBAAvB,kBADJ,OAGQ,4BAAQA,UAAU,kBAAkBM,GAAG,gBACvCC,aAAcX,KAAKnB,MAAMC,YACzB8B,SAAUZ,KAAKL,iBAEf,4BAAQE,MAAM,cAAd,SACA,4BAAQA,MAAM,eAAd,UACA,4BAAQA,MAAM,gBAAd,YATR,OAYI,4BAAQgB,KAAK,SAAST,UAAU,yBAAyBU,QAASd,KAAKF,cAAvE,qBAGJ,yBAAKM,UAAU,2BAEa,UAAtBJ,KAAKnB,MAAMG,OACT,yBAAKoB,UAAU,qBAAqBC,MAAO,CAAEU,SAAU,WAAYC,MAAO,OAAQC,OAAQ,OAAQC,OAAQ,MAA1G,cACe,6BADf,mBAEqBlB,KAAKnB,MAAMM,aAE9B,KAEkB,YAAtBa,KAAKnB,MAAMG,OACT,yBAAKoB,UAAU,sBAAsBC,MAAO,CAAEU,SAAU,WAAYC,MAAO,OAAQC,OAAQ,OAAQC,OAAQ,MAA3G,aACc,6BADd,kBAEoBlB,KAAKnB,MAAMM,aAE7B,KAGN,yBAAKiB,UAAU,GAAGe,IAAKnB,KAAKnB,MAAMQ,aAAcgB,MAAO,CAAEU,SAAU,WAAYC,MAAO,QAASE,OAAQ,KAAOE,IAAI,kBAElH,yBAAKf,MAAO,CAAEgB,QAAS,QAASN,SAAU,WAAYO,KAAM,OACxD,6BACI,kBAAC,YAAD,CAAWC,IAAI,OAAOC,mBAAmB,OAAOC,eAAgB,CAAET,MAAO,OAAQC,OAAQ,QAAUS,IAAI,gBAE3G,6BACI,kBAAC,YAAD,CAAWH,IAAI,OAAOC,mBAAmB,OAAOC,eAAgB,CAAET,MAAO,OAAQC,OAAQ,QAAUS,IAAI,iBAE3G,6BACI,kBAAC,YAAD,CAAWH,IAAI,OAAOC,mBAAmB,OAAOC,eAAgB,CAAET,MAAO,OAAQC,OAAQ,QAAUS,IAAI,mBAI/G,yBAAKrB,MAAO,CAAEW,MAAO,OAAQC,OAAQ,MACjC,kBAAC,YAAD,CAAWM,IAAI,MAAMG,IAAK1B,KAAKnB,MAAMC,YACjC6C,gBAAgB,cAChBC,cAAc,EACdC,mBAAmB,EACnBC,sBAAsB,EACtBC,YACI,CACIC,QAAS,CACLC,KAAM,UACN,eAAgB,EAChBC,OAAQ,OACR,eAAgB,EAChB,iBAAkB,GAEtBC,MAAO,CACH,eAAgB,GAChBC,OAAQ,UACRH,KAAM,WAEVI,SAAU,CACNJ,KAAM,UAEVK,cAAe,IAIvBC,aAAa,EACbd,eAAgB,CACZT,MAAO,OACPC,OAAQ,QAEZO,mBAAmB,MACnBgB,cAAexC,KAAKT,kBACpBkD,gBACI,SAAUjD,EAAOkD,EAAOC,GACpBnD,EAAMoD,sBAU1B,qC,GA1KRC,IAAMC,WCKXC,MARf,WACI,OACI,yBAAK3C,UAAU,aACX,uC,MCkBG4C,MApBf,WACI,OAEI,yBAAK5C,UAAU,mBAEX,yBAAKA,UAAU,OAEX,yBAAKA,UAAU,UAEX,wBAAIC,MAAO,CAAEC,WAAY,cAAeC,MAAO,QAASC,OAAQ,SAAhE,+BCqCLyC,MAxCf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAUC,mBAChB,yBAAK/C,UAAU,OACb,4BAAQA,UAAU,cAEhB,kBAAC,IAAD,CAAOgD,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAA9F,GAAK,OAC/B,kBAAC,IAAM2C,SAAP,KACE,yBAAKoD,MAAM,aACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,UACT,yBAAKpC,IAAKqC,IAAMpC,IAAI,YAAYmC,MAAM,eAG1C,yBAAKA,MAAM,OACT,yBAAKA,MAAM,WAEX,yBAAKA,MAAM,UACT,kBAAC,IAAD,CAAM9C,GAAG,eAAeL,UAAU,iCAAiCqD,KAAK,UAAxE,8BACA,kBAAC,IAAD,CAAMhD,GAAG,YAAYL,UAAU,iCAAiCqD,KAAK,UAArE,mCACA,kBAAC,IAAD,CAAMhD,GAAG,SAASL,UAAU,iCAAiCqD,KAAK,UAAlE,UAEF,yBAAKF,MAAM,iBAQrB,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAI,gBAAmBK,UAAWnG,IAC/C,kBAAC,IAAD,CAAO6F,OAAK,EAACC,KAAI,YAAeK,UAAWV,IAC3C,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAI,SAAYK,UAAWX,QC7B9BY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS7D,MACvB,2DCZN8D,IAAST,OAAO,kBAAC,EAAD,MAASU,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b301687a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/quiz.7195bd20.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { VectorMap } from 'react-jvectormap';\nimport mapData from '../json/mapdata.json';\n\nclass Flags extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            result: 'unknown',\n            countryCode: '',\n            countryName: '',\n            countryImage: '',\n            selectedMap: 'europe_mill'\n        };\n    }\n\n    componentDidMount() {\n        const { mapid } = this.props.match.params\n        console.log(\"Selected map: \" + mapid);\n        if (mapid === \"world\") {\n            this.setState({ selectedMap: 'world_mill' })\n        }\n        else if (mapid === \"europe\") {\n            this.setState({ selectedMap: 'europe_mill' })\n        }\n        else if (mapid === \"oceania\") {\n            this.setState({ selectedMap: 'oceania_mill' })\n        }\n        this.setRandom();\n    }\n\n    shuffleArray = (array) => {\n        let i = array.length - 1;\n        for (; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    }\n\n    setRandom = () => {\n        console.log(mapData.countries);\n        let shuffledCountries = this.shuffleArray(mapData.countries.filter(f => f.maps.some(m => m === this.state.selectedMap)));\n        console.log(shuffledCountries);\n        this.setState({ result: 'unknown', countryCode: shuffledCountries[0].iso2, countryName: shuffledCountries[0].name, countryImage: shuffledCountries[0].image });\n    }\n\n    handleRegionClick = (event, data) => {\n        //this.refs.map.getMapObject.setFocus = \"BE\";\n        //event.preventDefault();\n        if (this.state.countryCode.toLowerCase() === data.toLowerCase()) {\n            this.setState({ result: 'correct' });\n        } else {\n            this.setState({ result: 'wrong' });\n        }\n    }\n\n    handleMapChange = (event) => {\n        this.setState({ selectedMap: event.target.value });\n        this.onResetClick();\n        //this.setState({ [event.target.name]: event.target.value });\n    }\n\n    onResetClick = () => {\n        this.setRandom();\n        console.log(this.state);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"container-fluid\">\n\n                    <div className=\"row\">\n\n                        <div className=\"col-12\">\n\n                            <h1 style={{ fontFamily: \"Baby Blocks\", color: \"white\", margin: \"30px\" }}>Link flag to country</h1>\n\n                            <div className=\"form-group mb-2\">\n                                <Link to=\"/\" className=\"btn btn-light btn-lg\">Return to menu</Link>\n                                &nbsp;\n                                    <select className=\"form-control-lg\" id=\"selectMapType\"\n                                    defaultValue={this.state.selectedMap}\n                                    onChange={this.handleMapChange}>\n\n                                    <option value=\"world_mill\">World</option>\n                                    <option value=\"europe_mill\">Europe</option>\n                                    <option value=\"oceania_mill\">Oceania</option>\n                                </select>\n                                &nbsp;\n                                <button type=\"button\" className=\"btn btn-primary btn-lg\" onClick={this.onResetClick}>Try another flag</button>\n                            </div>\n\n                            <div className=\"card border border-dark\">\n\n                                {(this.state.result === 'wrong') ?\n                                    <div className=\"alert alert-danger\" style={{ position: \"absolute\", width: \"100%\", height: \"100%\", zIndex: 997 }}>\n                                        Incorrect! <br />\n                                        The answer was: {this.state.countryName}\n                                    </div>\n                                    : null\n                                }\n                                {(this.state.result === 'correct') ?\n                                    <div className=\"alert alert-success\" style={{ position: \"absolute\", width: \"100%\", height: \"100%\", zIndex: 997 }}>\n                                        Correct!  <br />\n                                        It was indeed: {this.state.countryName}\n                                    </div>\n                                    : null\n                                }\n\n                                <img className=\"\" src={this.state.countryImage} style={{ position: \"absolute\", width: \"220px\", zIndex: 999 }} alt=\"Flag to guess\" />\n\n                                <div style={{ display: 'block', position: 'absolute', top: -9999 }}>\n                                    <div>\n                                        <VectorMap ref=\"map1\" containerClassName=\"map1\" containerStyle={{ width: '100%', height: '100%' }} map=\"world_mill\"></VectorMap>\n                                    </div>\n                                    <div>\n                                        <VectorMap ref=\"map2\" containerClassName=\"map2\" containerStyle={{ width: '100%', height: '100%' }} map=\"europe_mill\"></VectorMap>\n                                    </div>\n                                    <div>\n                                        <VectorMap ref=\"map3\" containerClassName=\"map3\" containerStyle={{ width: '100%', height: '100%' }} map=\"oceania_mill\"></VectorMap>\n                                    </div>\n                                </div>\n\n                                <div style={{ width: '100%', height: 600 }}>\n                                    <VectorMap ref=\"map\" map={this.state.selectedMap}\n                                        backgroundColor=\"transparant\"\n                                        zoomOnScroll={true}\n                                        regionsSelectable={true}\n                                        regionsSelectableOne={true}\n                                        regionStyle={\n                                            {\n                                                initial: {\n                                                    fill: '#D3D3D3',\n                                                    \"fill-opacity\": 1,\n                                                    stroke: 'none',\n                                                    \"stroke-width\": 0,\n                                                    \"stroke-opacity\": 1\n                                                },\n                                                hover: {\n                                                    \"fill-opacity\": 0.8,\n                                                    cursor: 'pointer',\n                                                    fill: '#0069d9'\n                                                },\n                                                selected: {\n                                                    fill: 'yellow'\n                                                },\n                                                selectedHover: {\n                                                }\n                                            }\n                                        }\n                                        zoomButtons={false}\n                                        containerStyle={{\n                                            width: '100%',\n                                            height: '100%'\n                                        }}\n                                        containerClassName=\"map\"\n                                        onRegionClick={this.handleRegionClick}\n                                        onRegionTipShow={\n                                            function (event, label, code) {\n                                                event.preventDefault();\n                                                //label.html(\n                                                /*'<b>'+label.html()+'</b></br>'+\n                                                '<b>Unemployment rate: </b>'+'%'*/\n                                                //);\n                                            }\n                                        }\n                                    />\n                                </div>\n                            </div>\n                            <br />\n\n\n                        </div>\n\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Flags;","import React from 'react'\n\nfunction About(){\n    return (\n        <div className=\"container\">\n            <h1>About</h1>\n        </div>\n    )\n}\n\nexport default About;","import React from 'react';\r\nimport capitalData from '../json/capitaldata.json'\r\n\r\nfunction Capitals() {\r\n    return (\r\n\r\n        <div className=\"container-fluid\">\r\n\r\n            <div className=\"row\">\r\n\r\n                <div className=\"col-12\">\r\n\r\n                    <h1 style={{ fontFamily: \"Baby Blocks\", color: \"white\", margin: \"30px\" }}>Link capital to country</h1>\r\n\r\n                    \r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Capitals;","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport quiz from './quiz.png'\nimport Flags from './components/pages/Flags';\nimport About from './components/pages/About';\nimport Capitals from './components/pages/Capitals';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n          <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <div class=\"container\">\n                  <div class=\"row\">\n                    <div class=\"col-md\">\n                      <img src={quiz} alt=\"quiz logo\" class=\"App-logo\"></img>\n                    </div>\n                  </div>\n                  <div class=\"row\">\n                    <div class=\"col-sm\">\n                    </div>\n                    <div class=\"col-md\">\n                      <Link to=\"/flags/world\" className=\"btn btn-light btn-lg btn-block\" role=\"button\">Match flags with countries</Link>\n                      <Link to=\"/capitals\" className=\"btn btn-light btn-lg btn-block\" role=\"button\">Match a country to it's capital</Link>\n                      <Link to=\"/about\" className=\"btn btn-light btn-lg btn-block\" role=\"button\">About</Link>\n                    </div>\n                    <div class=\"col-sm\">\n                    </div>\n                  </div>\n                </div>\n              </React.Fragment>\n            )\n          } />         \n\n          <Route exact path={`/flags/:mapid`} component={Flags} />\n          <Route exact path={`/capitals`} component={Capitals} />\n          <Route exact path={`/about`} component={About} />\n\n        </header>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}